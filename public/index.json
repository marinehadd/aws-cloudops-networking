[
{
	"uri": "/",
	"title": "Welcome to the Amazon CloudOps Networking Workshop!",
	"tags": [],
	"description": "",
	"content": "Welcome to the Amazon CloudOps Networking Workshop! In this workshop, we will go through the basics of networking in both traditional and cloud context. At the end of it, you should understand all the networking concepts at a high level and be able to deploy a basic VPC infrastructure in AWS console.\nHere is the schedule for the Networking workshop:\n   Date Time     01/03/2021 9:00 – 11:00am ET   02/03/2021 9:00 – 11:00am ET   04/03/2021 9:00 – 11:00am ET   08/03/2021 9:00 – 11:00am ET   09/03/2021 9:00 – 11:00am ET   11/03/2021 9:00 – 11:00am ET    "
},
{
	"uri": "/introduction.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "This workshop is designed to provide fundamental networking knowledge in AWS Cloud.\nAs a pre-requisite, you should have:\n Completed the CloudOps Linux Workshop An AWS account with AWS console access Slack PuTTY installed and working (if you use Windows)  The agenda will split in 3 topic areas as below:\n Traditional Networking AWS Networking Advanced AWS Networking  Resources\n You can submit any questions and/or answers in the following FAQ document. This document will be updated everyday after each lecture. We will play a Kahoot quizz at the end of each lecture. Please fill in the Survey at the end of each lecture. This will help us understand how everyone feels and tailor our sessions accordingly. Make sure you are registered to the #networking Slack Channel. For additional learning material, go to Further Reading. For FAQs and exercises answers, go to FAQs. To register your attendance, click on this [link] (https://docs.google.com/spreadsheets/d/1xxHMJ_m2R-VvTCkJWQvTv6I2geRETGq9m9ezoIEyBxw/edit#gid=2052515162)  "
},
{
	"uri": "/day-2-aws-networking-basics/aws-infrastructure.html",
	"title": "AWS Infrastructure",
	"tags": [],
	"description": "",
	"content": "AWS currently has 24 regions in its global infrastructure. A region is a physical location around the world where data centers are clustered. These data centers are grouped in Availability Zones. Each AWS Region consists of multiple, isolated, and physically separate AZ\u0026rsquo;s within a geographic area. There are 77 Availability Zones.\nAWS is responsible of protecting this infrastructure according to the Shared Responsibility Model:\n"
},
{
	"uri": "/day-1-networking-foundations/network-definition.html",
	"title": "What is a network?",
	"tags": [],
	"description": "",
	"content": "A network can be defined as a group of devices interconnected together via an edge networking component forming a dedicated and private environment.\nLet\u0026rsquo;s take an example:\nThere are several types of networks but the most common are LAN (Local Area Network) and WAN (Wide Area Network). As the names indicate, a LAN is defined by a single network (i.e. your house network) while a WAN allows interconnection between different LANs.\nThe main devices used in networking are switch and router. They work at different layers and allow connectivity inside and outside a network, respectively.\nThe main difference is that a switch communicates with MAC addresses (a unique physical ID) while a router communicates with IP addresses, and the main difference between a MAC and an IP is that it works at different network layers and a MAC is a static physical ID that cannot be changed while an IP can be allocated and changed anytime.\nThe switch allows all devices in the network/LAN to communicate while the router sits on the edge of the LAN in order to provide external connectivity, either to the Internet or to another network/LAN.\nWhen a host sends traffic to another host, the traffic is made of packets. Those packets contain information about the traffic to be sent, including the source and destination MAC address and IP address.\nSo when the traffic remains local, the switch can transfer the packet to its destination host by reading the MAC address in the packet. However, when the traffic is destined to an external host, the network is different and therefore the switch doesn\u0026rsquo;t know where to send the packet. That\u0026rsquo;s when comes the role of the router, to pick up the packet, and checks its route table to know where to transfer the traffic.\nSo, a switch will allow intra-LAN connectivity, a router will allow inter-LAN connectivity.\nA router is attached to a network via a network interface with a static IP address that belongs to that network. It can have different interfaces with different IP addresses, therefore belonging to different networks at the same time. In that case, the router doesn\u0026rsquo;t need to communicate with another router to reach another network, the routing is done internally.\nThe router IP address is called a Gateway IP, meaning it is the door via which all traffic is going, when a network host is trying to reach an external IP/host.\nIn real life, there are also devices that combine switch and router together, therefore can ensure both types of communication.\nIn a WAN, edge routers of the different LANs (refer to Example 2 above) route traffic to each other to allow communication between the different networks.\nNow that we have the big picture, let\u0026rsquo;s talk about networking layers.\n"
},
{
	"uri": "/day-1-networking-foundations/osi-model.html",
	"title": "OSI Model",
	"tags": [],
	"description": "",
	"content": "Networking is based on the OSI model:\nEach layer has a meaning in networking. We will not cover the layers in depth, but you can read more about in the Further Reading section.\nNetworking is based on the OSI model, it is a bit like the layers of a cake, often referred as L1, L2, L3, etc..\nLet\u0026rsquo;s pick some real life examples:\n  L1 = a router, a switch, a cable, anything physical\n  L2 = a switch, a MAC address\n  L3 = a router, an IP address\n  L4 = online streaming\n  L5 = when you connect to an application\n  L6 = when you used Putty to login to your EC2 instance during Linux CloudOps workshop\n  L7 = an application\n  "
},
{
	"uri": "/day-2-aws-networking-basics/whats-a-vpc.html",
	"title": "What is a VPC?",
	"tags": [],
	"description": "",
	"content": "Amazon Virtual Private Cloud (Amazon VPC) allows you to provision resources, such as Amazon EC2 instances, into a virtual network. This virtual network is a logically isolated area within the AWS cloud that resembles a traditional network. Think about it as a private data center in the cloud.\nThe VPC is highly available as it spans all of the Availability Zones in the Region where you launch it. When you create a VPC, you provide a CIDR block that specifies the range of IP addresses for the VPC. For example, 10.0.0.0/16.\nA VPC can contain multiple subnets where you can launch AWS resources. Each subnet will reside in one Availability Zone and you can have multiple subnets in the same Availability zone.\nYou must specify a CIDR block for the subnets from the range of your VPC. For example, 10.0.0.0/24 and 10.0.1.0/24. If you launch an EC2 instance inside the first subnet, it will have an IP address inside the 10.0.0.0/24 range (for example, 10.0.0.42).\nThe VPC has an implicit router that uses route tables to direct traffic. Each subnet is associated with a route table that controls the routing for that particular subnet. If you don\u0026rsquo;t associate explicitly a subnet with a particular route table, it will be implicitly associated with the main route table:\n   Destination Target     10.0.0.0/16 local    Multiple subnets can be associated with the same route table. However, you can only associate a subnet with one route table, except for the default (or main) route table that is automatically generated at the VPC creation.\nAs we discussed in Traditional Networking, the first IP and the last IP of a CIDR are reserved for Network ID and Broadcast respectively. AWS reserves 5 IPs by default within each subnet:\n the first IP : Network ID the second IP : VPC router (referred as the router gateway in traditional networking) the third IP : DNS resolver the fourth IP : reserved for future use the last IP : broadcast address  So, if our subnet is 10.10.1.0/24, the following IPs will be reserved:\n 10.10.0.0 10.10.1.1 10.10.1.2 10.10.1.3 10.10.1.255  In AWS, the maximum size of a CIDR is /16 and the minimum size is /28, which means:\n/28 = 1111 1111.1111 1111.1111 1111.1111 0000 = 255.255.255.240\n255 - 240 = 15\nBecause a network starts from .0 (.0 to .15), there are 16 addresses in a /28. However, we need to remove the 5 reserved IPs, therefore it gives us 11 IPs available for use. That means that if you need more than 11 IPs in your network, you will need to have a bigger CIDR such as /27 or above.\nLAB 1: The final architecture of the Lab can be found in Lab Architecture section.\n Login to your AWS account Go to VPC Services and on the left panel, click on Your VPCs Click on Create VPC and give it a name (i.e. VPC-\u0026ldquo;Your Initials\u0026rdquo;) and a /16 CIDR block (i.e. 10.10.0.0/16), then leave the rest as default and click Create VPC Go back to the Your VPCs tab and check that your VPC has been created  "
},
{
	"uri": "/day-2-aws-networking-basics/privatepublic.html",
	"title": "Private/Public concepts",
	"tags": [],
	"description": "",
	"content": "Resources launched inside a VPC will be assigned an IP address from the CIDR block assigned. For example, for a 10.0.0.0/16 CIDR block, an EC2 instance could have 10.0.0.42 as its IP address, depending on which subnet it lives in.\nAll IPs inside that VPC CIDR block are private : they only make sense inside that VPC and cannot be reached from the Internet or from any other network/VPC unless the routing has been setup accordingly. In order to make an EC2 instance publicly reachable, two conditions must be fulfilled:\n the EC2 instance must have a public IP address an Internet Gateway must be attached to its VPC route table  An Internet Gateway is a highly available component that brings connectivity to your VPC, allowing access to the Internet. Your public resources must reside in a subnet that\u0026rsquo;s associated with a route table that has a route to an Internet Gateway. This subnet is called a public subnet.\nA private subnet, on the other hand, is associated with a route table that does not have a route to an Internet Gateway. The resources that should remain private, reside in these subnets. However, it can happen that some private resources need access to the Internet to download some software, but while remaining unaccessible from the Internet. In this case, you can configure a NAT Gateway to allow egress Internet access from the private instances.\nThe NAT Gateway allow your EC2 instance to connect to the Internet, but prevent the Internet from connecting to it. The NAT Gateway resides in a public subnet in a certain Availability Zone. In order to allow your private subnets to use the NAT Gateway to connect to the Internet, you must add it to the route tables they are associated with. Note that a NAT Gateway still needs an Internet Gateway to access the Internet. The NAT is only present to proxy the Internet traffic for the private instances, but the Internet Gateway remains the main and only Internet exit gate for a VPC.\nNote that all subnets in a VPC, regardless of being public or private, can communicate with each other by default because they belong to the same VPC CIDR. This is not a traditional networking use case, but in AWS, when the VPC gets created, all route tables are assigned a route to the VPC CIDR.\nLAB 2: Refer to Lab Architecture for architecture.\nCreate a public subnet:\n Go to VPC Services and on the left panel, click on Subnets Click on Create Subnet  choose your VPC from the list give it a name (PublicSub-\u0026ldquo;Your Initials\u0026rdquo;) choose one of the Availability Zones Use the first /24 of your VPC CIDR (i.e. 10.10.0.0/24) Click Create Subnet    Now, your subnet is setup but can only communicate within the VPC by default.\n In the VPC Services tab, click on Route Tables Click on Create Route Table  choose your VPC from the list give it a name (PublicRT-\u0026ldquo;Your Initials\u0026rdquo;) Click Create   On the Route Tables interface, look for your route table:  select the route table on the panel at the bottom, click on Subnet Associations Edit subnet associations and select your public subnet and Save    Now, you have a public route table that will be used to route all external (such as Internet) traffic to and from your public subnet. However, we still don\u0026rsquo;t know how to go to the Internet as we have no exit door yet.\n In the VPC Services tab, click on Internet Gateways Click on Create Internet Gateway  give it a name (IGW-\u0026ldquo;Your Initials\u0026rdquo;) and Create   Once it is created, you should be on its configuration page:  click Actions and select Attach to VPC select your VPC and Attach    Now, your Internet Gateway belongs to your VPC environment, so we can set it up to route all Internet traffic.\n In the VPC Services tab, click on Route Tables On the Route Tables interface, look for your public route table:  select the public route table on the panel at the bottom, click on Routes then Edit routes Click Add route, set the following:  Destination: 0.0.0.0/0 (0/0 means everywhere, it is not restricted to a specific network) Target: Select Internet Gateway from the drop-down and click on your IGW-XXXX   Save the changes    Now, you have a public subnet! In a few sections, we will setup an EC2 instance, called public instance as a result of sitting in a public subnet, and test connectivity to the Internet.\nCreate a private subnet:\n Go to VPC Services and on the left panel, click on Subnets Click on Create Subnet  choose your VPC from the list give it a name (PrivateSub-\u0026ldquo;Your Initials\u0026rdquo;) choose one of the Availability Zones Use the second /24 of your VPC CIDR (i.e. 10.10.1.0/24) Click Create Subnet    Now, your subnet is setup but can only communicate within the VPC by default.\n In the VPC Services tab, click on Route Tables Click on Create Route Table  choose your VPC from the list give it a name (PrivateRT-\u0026ldquo;Your Initials\u0026rdquo;) Click Create   On the Route Tables interface, look for your route table:  select the route table on the panel at the bottom, click on Subnet Associations Edit subnet associations and select your private subnet and Save    Now, you have a private route table that will be used to route internal traffic. At the moment, we are unable to reach the Internet since we have no NAT Gateway.\n In the VPC Services tab, click on NAT Gateways Click on Create NAT Gateway  give it a name (NGW-\u0026ldquo;Your Initials\u0026rdquo;) and Create select your public subnet (We choose the public subnet just to configure the NAT, since a NAT is a public instance) click Allocate Elastic IP and Create    Now, your NAT Gateway belongs to your VPC environment because it is setup in its public subnet. It is therefore ready to be setup and used by the private subnet.\n In the VPC Services tab, click on Route Tables On the Route Tables interface, look for your private route table:  select the private route table on the panel at the bottom, click on Routes then Edit routes Click Add route, set the following:  Destination: 0.0.0.0/0 (0/0 means everywhere, it is not restricted to a specific network) Target: Select NAT Gateway from the drop-down and click on your NGW-XXXX   Save the changes    Now, you have a private subnet with outbound access to the Internet. In the next section, we will setup an EC2 instance, called private instance as a result of sitting in a private subnet, and test outbound connectivity to the Internet.\n"
},
{
	"uri": "/day-2-aws-networking-basics/security.html",
	"title": "Security in a VPC",
	"tags": [],
	"description": "",
	"content": "A security group is a virtual stateful firewall that controls inbound and outbound network traffic to AWS resources and Amazon EC2 instances. At AWS, security groups act like a built-in firewall for your virtual servers. With these security groups, you have full control about how accessible your instances are. At the most basic level, it is just another method to filter traffic to your instances. It provides you control about what traffic to allow or deny. To determine who has access to your instances, you configure a security group rule. Rules can vary from keeping the instance completely private, completely public, or somewhere in between. When you first configure a Security Group, all access is denied, so you need to add rules to allow traffic to flow. Security Groups are stateful, that means that anything that you allow to flow out of your instance is allowed by default to flow back in your instance.\nA Network access control list (network ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. When you first configure a Network ACL, all access is allowed by default. NACL are stateless, that means that if you want to allow a type of traffic, you need to do it both for inbound and outbound.\nIn summary, the Network ACL acts at the subnet level. The Security Groups acts at the instance level.\nLAB 3: Refer to Lab Architecture for architecture.\nCreate a public instance:\n Go to EC2 Services and click on Launch Instance  select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC Subnet: choose your public subnet Auto-assign Public IP: Select Enable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : PublicEC2-\u0026ldquo;YourInitials\u0026rdquo; Leave the security group as default In the Review and Launch page, click Launch and select your KP that you created and stored locally during the Linux course    Let it spin up, and create your private instance in the meantime.\nCreate a private instance:\n Go to EC2 Services and click on Launch Instance  select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC Subnet: choose your private subnet Auto-assign Public IP: Select Disable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : PrivateEC2-\u0026ldquo;YourInitials\u0026rdquo; Leave the security group as default In the Review and Launch page, click Launch and select your KP that you created and stored locally during the Linux course If you deleted your key pair, just create a new one and download it.    Now you should have 1 public instance and 1 private instance. In the EC2 interface, if you select them one by one and look at the bottom panel, you should see all details about the instances. Notice that your public EC2 has a public IPv4 address as well as a public DNS name, on the opposite of the private EC2 that only has private addresses.\nEdit the Security Group:\n On the public EC2 bottom panel, select the Security tab. The only rule allowed is SSH on port 22 from anywhere (o.o.o.o/0). Even if we want this instance to be publicly reachable, we do not want everyone to SSH into it and change configuration. Click on the Security Group and Edit Inbound rules  set the Source as My IP and in parallel, verify that it matches your IP address by typing whatsmyip in another browser tab Add a new rule with Type as All ICMP - IPv4 and Source as your IP again Save rules    Now that we have SSH and ICMP traffic allowed from our IP address, it means only you will be able to connect only on these specific ports to the instance.\nSSH (port 22) is the protocol used to login to your instance\u0026rsquo;s CLI. ICMP (no port number) is the protocol used to communicate between instances at the network level. For example, we use the command ping to test connectivity from one instance to another, and this command uses ICMP protocol.\nWe will not be using NACL today as it is not required in this context, but you can have a look at the default one by going to VPC Services -\u0026gt; Subnets -\u0026gt; Network ACL (bottom panel).\nTest public connectivity to your public instance:\n open a terminal window and ping the public IP address of your instance ( ping X.X.X.X ) Try to login to your instance (refer to https://linuxworkshop.aws-cloudops.com/2.logging_in.html if you need the steps to use your key pair to login)  If you do the same test on the private IP address of this same instance (public instance), you will notice that all traffic is blocked.\nWe cannot do the same with the private instance since there is no public IP, you can try to SSH to its private IP to prove that it is not reachable. A way to SSH into it would be to setup a Bastion instance. This instance is a public instance that just acts as a jump box in order to connect to private instances securely. Despite being public, this instance would also have a private IP address belonging to that same VPC, therefore routable to the private subnet of the private instance.\nCleanup:\nYou can keep this setup to work on different labs and/or play around with the AWS resources.\nIf not, don\u0026rsquo;t forget to cleanup your setup by deleting resources in the reverse order of the lab steps.\n"
},
{
	"uri": "/day-1-networking-foundations/subnetting.html",
	"title": "Subnetting",
	"tags": [],
	"description": "",
	"content": "A network (or LAN) is defined by a a block of IP addresses called a CIDR block, from which every host in the network receives an IP address.\nA CIDR indicates the size of a network, and networks are calculated with subnetting. Subnetting allows the segmentation of a bigger network in smaller networks. For example, a company could have different departments (HR, Finances, etc) and therefore wish to segregate their corporate network based on these departments. So, each department will be allocated a portion of the big network (CIDR).\n Anatomy of a an IP address:  An IP address is made of 4 octets, 1 octet equals to 8 bits. So the maximum length of an IP address is 32 bits.\nIP addresses are translated from binaries, so each number represents an octet and an octet ranges from 0 to 255.\nExample:\n0000 0000 = 0\n1111 1111 = 255\n=\u0026gt; 1111 1111.1111 1111.1111 1111.1111 1111 = 255.255.255.255\nHow is this calculated?\nEach bit is a power of 2 (X^2) and is calculated from right to left.\nExample:\n192.168.1.0 =\u0026gt; 1100 0000.1010 1000.0000 0001.0000 0000\n Subnet Masks  An IP address is segmented in 2 parts :\n The Network section (always the left part) The Host section (always on the right).  The Host portion defines the number of IPs available in a network. The Network portion remains the same for all the hosts in a same network and is called the Network ID. A subnet mask represents the number of bits (out of 32) used in the network portion.\nExample:\nNetwork: 10.1.1.0/24\nHost 1: 10.1.1.1\nHost 2: 10.1.1.2\nHost 3: 10.1.1.4\nThe /24 is the subnet mask and defines the size of the network portion, and therefore the number of bits left for the host portion (= number of available IPs to use in the network).\n/24 represents 24 bits:\n1111 1111.1111 1111.1111 1111.0000 0000 = 255.255.255.0\n255.255.255 = network section\n0 = host section\nGoing back to the previous example:\n10.1.1.0/24 = 10.1.1.0/255.255.255.0\nSo, the network ID is 10.1.1.0, and hosts can only be allocated in the .0 octet.\nExamples:\nExample 1:\n192.168.0.0/16 = 192.168.0.0/255.255.0.0\nNetwork ID = 192.168.0.0\nHost range = 192.168.0.0 - 192.168.255.255\nExample 2 :\n192.168.128.0/17 = 192.168.128.0/255.255.128.0\nNetwork ID = 192.168.128.0\nHost range = 192.168.128.0 - 192.168.255.255\nThe host range allows to calculate the number of hosts you can have in the network. The way to calculate is as follow: 2^(Nb of host bits).\nExample:\n 192.168.0.0/16 has 16 host bits so 2^16 = 65536 hosts 10.1.1.0/24 has 8 host bits so 2^8 = 256 hosts  So, the smaller the network portion is, the more hosts you can allocate.\nSo, as we talked about segmenting big networks into smaller networks, we can divide big CIDR into small CIDR.\nHow to calculate?\n/16 = 16 bits = 2^16 65536 hosts\n/24 = 8 bits = 2^8 = 256 hosts\n= 65536/256 = 256\nSo there are 256 /24 subnets in a /16 subnet.\n/24 = 8 bits = 2^8 = 256 hosts\n/25 = 7 bits = 2^7 = 128 hosts\n= 256/128 = 2\nSo there are 2 /25 subnets in a /24 subnet.\nOne last thing to remember is that there are always 2 IP addresses that cannot be used within a subnet:\n The first IP (10.1.1.0 if the subnet is 10.1.1.0/24) since it is reserved for the Network ID The last IP (10.1.1.255 if the subnet is 10.1.1.0/24) since it is reserved for the Broadcast IP. The broadcast IP is the IP used within a network to send messages to everyone in the network.  Not always but in most cases, as a best practice, the second IP of a subnet is dedicated to the router interface, called the Gateway IP. The gateway IP will be 10.1.1.1.1 if the subnet is 10.1.1.0/24.\nExercise:\n 10.20.3.2/24  What is the binary address of 10.20.3.2?\nWhat is the network ID?\nWhat is the subnet mask?\nWhat is the gateway router IP address?\nHow many IP addresses in this network?\n"
},
{
	"uri": "/day-2-aws-networking-basics/load-balancing.html",
	"title": "Elastic Load Balancing",
	"tags": [],
	"description": "",
	"content": "The main purpose of a load balancer is to balance the load of your traffic across several servers.\nLoad balancers in AWS are called elastic because they can dynamically adjust based on the load, and provide a lot more features than traditionally.\nElastic Load Balancing automatically adjusts to incoming traffic and network changes by distributing traffic across multiple Amazon EC2 instances in the cloud, without manual intervention. This enables you to achieve higher levels of fault tolerance with your applications.\nThere are currently 3 types of a load balancer:\n• Application Load Balancer\n• Network Load Balancer\n• Classic Load Balancer\nApplication Load Balancer - As it\u0026rsquo;s name indicates, this type works at the application level (L7 in the OSI model) and also provides advanced routing and features. For instance, if you need to load balance web servers working on HTTP/HTTPS and want to make the most of advanced features then you should use the application load balancer. When you setup an application load balancer, you are only provided with its DNS name, but no IP address.\nNetwork Load Balancer - The network load balancer works at the transport level (L4 in the OSI model) and in most cases, is used when high performance is required. Let\u0026rsquo;s say you know you\u0026rsquo;ll get thousands of requests per second, then the network load balancer might be a good option. One advantage, depending on the context, of a network load balancer is that it is provided a static IP address (that will not change).\nClassic Load Balancer - A classic load balancer works both at L4 and L7 of the OSI model, but has limited features.\n"
},
{
	"uri": "/day-1-networking-foundations/routing.html",
	"title": "Routing",
	"tags": [],
	"description": "",
	"content": "The router comes into the picture when different hosts from different networks try to communicate. We have seen in a previous section that the router does all the routing to allow the internal hosts to talk to an external destination such as the Internet or just another network.\nThis communication is done by the means of routing tables and routing protocols.\nA route table is a source/destination map for the router to know where to send the traffic, based on the traffic destination.\nNB: ISP = Internet Service Provider\nThe source and destination correspond to subnets.\nThere are two types of routing:\n static routing : routes are manually added to route tables dynamic routing : routes are dynamically using routing protocols  There are several routing protocols, but the most commonly used are OSPF and BGP.\nOSPF is used to dynamically route traffic between networks of a same domain, while BGP is used to dynamically route between networks of different OSPF domains for example.\n"
},
{
	"uri": "/day-1-networking-foundations/dnsdhcp.html",
	"title": "DNS/DHCP",
	"tags": [],
	"description": "",
	"content": "Domain Name System (DNS): DNS stands for Domain Name System and it is used in our everyday tasks without even realising it. DNS can be compared to an address book since it is a directory of mappings between names and IP addresses and allows hosts to reach endpoints such as URLs or other machines.\nThe full name of a server or endpoint is made of a hostname and the domain in which it sits. It is called a Fully Qualified Domain Name (FQDN) and is used for DNS resolution.\n Hierarchy  DNS uses a hierarchy to manage the different types of servers.\nWhen using DNS, the URL or name of a server is read from right to left, the root being the highest in the hierarchy and represented by a \u0026ldquo;.\u0026rdquo;.\nBased on this hierarchy, there are several types of DNS servers:\n The Root servers, which represent the \u0026ldquo;.\u0026rdquo; of a domain The Top Level Domain (TLDs), which are authoritative for .net, .com. .io, etc.. The Authoritative servers, which own specific domains such as google.com, amazon.com, aws-cloudops.com, etc.. The DNS resolvers, which receive DNS queries and handle caching and resolution.   Resolution Types  DNS resolution can be either iterative or recursive.\nIn an iterative resolution, the local computer DNS resolver handles the full DNS resolution journey.\nIn a recursive resolution, the DNS resolver/caching server handles the full DNS resolution journey.\nOnce bob.com is resolved, the data will be cached into the local DNS cache so that next time it is queried, the resolution does not need to happen again, until the data expires. The time length of a cached resource is called a Time-To-Live (TTL). A TTL is a setting configured on a DNS resource to allow DNS caching.\n DNS Records  Those name/IP mappings stored in DNS servers are called resources or records.\nDNS stores different types of DNS records in its mapping directory, but there are only a few common ones that you will ever used:\n A record (Address) - maps a name to an IP address (i.e. bob.com -\u0026gt; 10.1.1.4) PTR record (Pointer) - maps an IP address to a name (i.e. 10.1.1.4 -\u0026gt; bob.com) CNAME record (Canonical Name) - maps a name to a name (i.e. network.bob.com -\u0026gt; something.else.com) NS record (Name Servers) - indicates the authoritative servers for the domain SOA record (Start of Authority) - provides administrative information about the domain MX record (Mail Exchange) - indicates which mail servers are used to send emails to the domain  Dynamic Host Configuration Protocol (DHCP): DHCP stands for Dynamic Host Configuration Protocol and is used to dynamically allocate IP addresses to clients in a network.\nThe way it works:\n A new client connects to a network The client requests the DHCP server a new IP address in this network The DHCP server leases an IP address to this client for a specific duration When the client disconnects, the IP is released in the DHCP pool. If the client remains and the duration has expired, the lease is renewed.  We call that process, DORA (Discover, Offer, Request, Acknowldge).\nWhen a DHCP server leases an IP address, it doesn\u0026rsquo;t only provide the IP but also information around it such as the router gateway of the network and the DNS servers. In other cases where a client would require other services such as a FTP server for example, this would also be provided in the lease. These additional information are called DHCP Options, and each option corresponds to a number.\nExamples:\n Option 1 = subnet mask Option 3 = router gateway Option 6 = DNS servers Option 51 = lease duration time  "
},
{
	"uri": "/day-2-aws-networking-basics/lab.html",
	"title": "ELB LAB",
	"tags": [],
	"description": "",
	"content": "In this lab, you will setup a VPC infrastructure with 4 subnets (2 private for the private servers, 2 public for the load balancer), 2 web servers and an Elastic Load Balancer to balance the web traffic between both servers.\nInfrastructure setup: Create a VPC:\n Login to your AWS account Go to VPC Services and on the left panel, click on Your VPCs Click on Create VPC and give it a name (i.e. VPC-ELB-LAB) and a /16 CIDR block (i.e. 192.168.0.0/16), then leave the rest as default and click Create VPC Go back to the Your VPCs tab and check that your VPC has been created  Create subnets:\nWe will create 4 subnets, where Subnets 1 and 2 will be used for public, and Subnets 3 and 4 will be used for private.\n Go to VPC Services and on the left panel, click on Subnets and create the subnets: Click on Create Subnet  choose your VPC from the list give it a name (Sub1-ELB-LAB) choose Availability Zone A CIDR: 192.168.1.0/24 Click Create Subnet   Click on Create Subnet  choose your VPC from the list give it a name (Sub2-ELB-LAB) choose Availability Zone B CIDR: 192.168.2.0/24 Click Create Subnet   Click on Create Subnet  choose your VPC from the list give it a name (Sub3-ELB-LAB) choose Availability Zone A CIDR: 192.168.3.0/24 Click Create Subnet   Click on Create Subnet  choose your VPC from the list give it a name (Sub4-ELB-LAB) choose Availability Zone B CIDR: 192.168.4.0/24 Click Create Subnet    Create route tables:\n In the VPC Services tab, click on Route Tables and create a public and a private route tables: Click on Create Route Table  choose your VPC from the list give it a name (PublicRT-ELB-LAB) Click Create   Click on Create Route Table  choose your VPC from the list give it a name (PrivateRT-ELB-LAB) Click Create    Make the public route table PUBLIC:\n In the VPC Services tab, click on Internet Gateways Click on Create Internet Gateway  give it a name (IGW-ELB-LAB) and Create   Once it is created, you should be on its configuration page:  click Actions and select Attach to VPC select your VPC and Attach    Now, create an Internet route in your public route table:\n In the VPC Services tab, click on Route Tables On the Route Tables interface, look for your public route table:  select PublicRT-ELB-LAB on the panel at the bottom, click on Routes then Edit routes Click Add route, set the following:  Destination: 0.0.0.0/0 (0/0 means everywhere, it is not restricted to a specific network) Target: Select Internet Gateway from the drop-down and click on IGW-ELB-LAB   Save the changes    And add the public subnets to it:\n On the Route Tables interface, look for your route table:  click on Subnet Associations Edit subnet associations and select Sub1-ELB-LAB and Sub2-ELB-LAB then save    Servers deployment: We want 2 servers to host the same content to allow the load balancer to balance the traffic between both. In our setup, the load balancer will be public (accessible from the Internet) and will have 2 roles: serve the servers web content and protect the servers from being accessed. As a result, the servers will remain private and \u0026ldquo;hide\u0026rdquo; behind the load balancer.\nCreate a private instance:\n  Go to EC2 Services and create the first instance:\n Click on Launch Instance select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC Subnet: choose Sub3-ELB-LAB Auto-assign Public IP: Select Disable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : WebServer1 In Security Groups, give it a name (i.e. SG-PrivateWS) leave the SSH rule and add a new rule for HTTP (port 80) with Custom source from 0.0.0.0/0 In the Review and Launch page, click Launch and select your KP that you created and stored locally during the Linux course If you deleted your key pair, just create a new one and download it.    Create the second instance:\n Click on Launch Instance select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC Subnet: choose Sub4-ELB-LAB Auto-assign Public IP: Select Disable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : WebServer2 In Security Groups, choose an existing security group and pick the same one you created for the first instance In the Review and Launch page, click Launch and select the same KP as for the previous instance.    Configure the web servers:\nThe instances are currently private, with no public IP. We will make them public just to be able to access them easily and setup the content, after which we will make them private again.\nNote: When you launch an instance directly with a public IP address, you can\u0026rsquo;t remove it. Here we only want temporary public access, so we will assign what we call Elastic IP addresses - they are public IPs that you create separately and can attach to and detach from instances as you wish.\n In the EC2 Services tab, scroll down to Network \u0026amp; Security and click on Elastic IPs:  Click on Allocate Elastic IP address Leave everything as default and click Allocate Edit the name (which should be empty) and give it a name \u0026ldquo;EIP-WS1\u0026rdquo; Select it and click on Actions then *Associate Elastic IP address\u0026quot; Choose WebServer1 and Associate Create a second elastic IP, call it \u0026ldquo;EIP-WS2\u0026rdquo; and associate it to WebServer2    Go to the EC2 instances tab and select WebServer1, check on the bottom details that there is an Elastic IP address. Do the same for WebServer2.\nNow we need to give them a route to the Internet, so we will temporarily associate the private subnets (Sub3-ELB-LAB and Sub4-ELB-LAB, in which our servers are living) to the public route table, and move them back when we are done.\n In the VPC Services tab, click on Route Tables On the Route Tables interface:  select the route table PublicRT-ELB-LAB on the panel at the bottom, click on Subnet Associations Edit subnet associations, select both Sub3-ELB-LAB and Sub4-ELB-LAB and Save    Now you should be able to SSH into both instances.\n For each instance, login with SSH and run the below commands in order to install an http server :  In the last command where you create your html file, REPLACE THE X WITH 1 FOR THE FIRST INSTANCE, AND 2 FOR THE SECOND INSTANCE.\nsudo su yum install httpd -y service httpd start chkconfig httpd on cd /var/www/html echo \u0026quot;\u0026lt;html\u0026gt;\u0026lt;h1\u0026gt;Hello World X\u0026lt;/h1\u0026gt;\u0026quot; \u0026gt; index.html  Verify the configuration:  For each instance, copy its elastic IP address, replace the ELASTICIP in the following URL HTTP://ELASTICIP/index.html Open a browser and enter the URL    Now we know our web servers are working, we can move the instances back to private:\n Go to the public route table and remove Sub3-ELB-LAB and Sub4-ELB-LAB subnets associations Go to the private route table and associate both subnets Go to the Elastic IPs and disassociate each Elastic IP from the web servers  If you browse the URLs again now, you should not get anything anymore.\nElastic Load Balancer deployment: Configure the load balancer:\n In the EC2 Services tab, scroll down to Load Balancing and click on Load Balancers:   Click on Classic Load Balancer\n Name: ELB-LAB4 Create ELB Inside: Select your VPC Create an internal load balancer: leave the box empty because we want it public Enable advanced VPC configuration: Check the box Make sure the Listener is on HTTP port 80 (because our web content lives on HTTP) Select Subnets: Click on the + button of Sub1-ELB-LAB and Sub2-ELB-LAB    Click Next and configure a new Security Group:\n Name it ELB-SG Add a rule for HTTP on port 80 with a source \u0026ldquo;Anywhere\u0026rdquo;    Click Next to Security Settings then Next again to Configure health Check:\n The settings should be set to:  ping protocol: HTTP ping port: 80 ping path: /index.html (because we configured the web content in an index.html file in the servers previously)      Click Next to Add EC2 instances:\n Select WebServer1 and WebServer2    Click Next then Next then Review and Create\n    Let\u0026rsquo;s now restrict the access to the web servers only from the load balancer, given the load balancer will be the one giving us the content.\n Go back to your EC2 instances, and one by one:  Select the instance and click on the Security tab at the bottom panel Click on the security group and edit the inbound rules:  Modify the source of the HTTP rule by selecting custom, and then scroll through the list to find the the security group of the load balancer, ELB-SG. While you\u0026rsquo;re there, you can modify the source of the SSH rule to \u0026ldquo;MyIP\u0026rdquo; Save   You do not need to do the same for the second instance since they are using the same security group.    Now your load balancer should be ready, go back to it, select it and check the bottom panel - you should see both web servers in the Instances tab at the bottom, they should show \u0026ldquo;in-service\u0026rdquo; after a little while.\nAccess the html content through the load balancer:\nOn the description tab, copy the DNS name of the load balancer and replace the ELBDNS in the URL and browse to HTTP://ELBDNS. You should see the index content of one of the servers, and if you keep refreshing it you should see it changing between \u0026ldquo;Hello World 1\u0026rdquo; and \u0026ldquo;Hello World 2\u0026rdquo;.\nThat\u0026rsquo;s when we want to use Route53 DNS. The lab is now over, however you can read the Route53 section below to understand how we would use DNS in this context.\nROUTE 53 (NOT PART OF THE LAB):\nLet\u0026rsquo;s assume now many users will access this application, but the URL is not very friendly and quite difficult to remember. So, we will not implement it in this lab because we do not own any DNS domain and would need to pay to own one, but here is what we would do:\n Go to Route53 Create a public hosted zone (basically a DNS domain accessible publicly) Inside this zone, create a CNAME record or Alias record (they differ a little but achieve the same goal of mapping a name to a name) to do:  newfriendlyname.mynewdomain.com = loadbalancerdnsname.elb.eu-west-1.amazonaws.com    You\u0026rsquo;re done! If you want to play a bit, you can stop one of the servers and browse to the ELB DNS name again to make sure that the traffic is only routed to the running server.\nAlso, don\u0026rsquo;t forget to cleanup your resources once you\u0026rsquo;re done.\n"
},
{
	"uri": "/day-1-networking-foundations.html",
	"title": "Networking Fundamentals",
	"tags": [],
	"description": "",
	"content": "In this section, we will talk about traditional networking in order to understand the main concepts before moving to AWS.\nWhat we will be covering:   LAN/WAN\n  OSI Model\n  IP addressing/Subnetting\n  Routing\n  DNS / DHCP\n  "
},
{
	"uri": "/day-1-networking-foundations/homework.html",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": "Subnetting Exercice  192.168.0.5/16  What is the binary address of 192.168.0.5?\nWhat is the network ID?\nWhat is the subnet mask?\nWhat is the gateway router IP address?\nHow many IP addresses in this network?\n 172.31.10.10/25  What is the binary address of 172.31.10.10?\nWhat is the network ID?\nWhat is the subnet mask?\nWhat is the gateway router IP address?\nHow many IP addresses in this network?\n"
},
{
	"uri": "/day-3-aws-advanced-networking/hybrid-cloud.html",
	"title": "Hybrid Connectivity",
	"tags": [],
	"description": "",
	"content": "AWS allows you to integrate your on-premise network with your cloud environment, either:\n by using a Direct Connect connection (DX) by using a Virtual Private Network (VPN)  They can both be used for this purpose but are chosen based on different needs.\nA VPN is an encrypted tunnel going over the Internet. There are two types of VPN in AWS:\n Site-to-Site VPN : this one is used between different sites, such as an on-premise network and the cloud, and uses IPsec type of VPN.   Client VPN : this one allows single clients to connect to specific resources.   Alternatively, if you require different features or use case, you can setup your own VPN instance with a Third Party Software.  AWS Direct Connect allows you to establish a direct connection from on-premise to AWS through a dedicated link.\nThere are several ways to use Direct Connect:\n There are several Direct Connect locations around the world to which you can connect your on-premise routers. You can work with an AWS Partner or a network provider to establish the connection from your on-premise data center to the AWS cloud. You can work with an AWS Partner to get a hosted connection, in which case you only get a slice of an existing Direct Connect link.  When connecting to AWS with Direct Connect, you need to setup a virtual interface to connect to the resources. When connecting to your private resources such as your VPCs, a private virtual interface will be required. When connecting to AWS services, a public virtual inerface will be required since they are considered as public services.\nIn order to use the same existing Direct Connect link to connect to another region, you can use a Direct Connect Gateway. In this case, an interface is created from your existing Direct Connect endpoint to connect to the Gateway, and then the Gateway can connect to the different VPCs in the different regions.\nVPN VS. DX\n   Feature VPN DirectConnect     Encryption YES NO   Connection Type VPN goes through the Internet DX is a dedicated connection   Bandwidth Limited to 1.25 GBPS Between 1GBPS and 10GBPS   Costs Cheaper More expensive than VPN   Routing Static/Dynamic Dynamic only    "
},
{
	"uri": "/day-2-aws-networking-basics/route53.html",
	"title": "Route53",
	"tags": [],
	"description": "",
	"content": "Amazon Route 53 is a Domain Name System (DNS) web service. Route 53 provides three main functions:\n  Domain registration: Route 53 allows you to register a domain name for your website, such as example.com. This domain name can be used by the users to access your website.\n  DNS service: an EC2 instance has an IP address assigned to it (i.e. 10.0.0.42). In order to connect to it, you would need to remember the whole IP address. Route 53 translates domain names, such as example.com, into IP addresses, such as 10.0.0.42. Therefore, you could access your website by using the domain name instead of having to remember the whole IP address. This is the same concept as for traditional networking.\n  Health checking: Route 53 uses health checks to monitor the health of your resources (such as EC2 instances or ELB). Optionally, you can receive notifications when your resources fail the health checks.\n  By default, AWS provides each VPC with a local DNS resolver, the .2 reserved IP address mentioned previously. This resolver allows resources inside the VPC to obtain a DNS name and to query other hosts.\nAs we discussed in Day 1, a DNS resolver is provided by a DHCP set. In AWS, there is a DHCP Option configured by default on each VPC, which contains details about the DNS servers provided by AWS.\nSo, alternatively, if you want to use another DNS server, you can just create a DHCP set with your DNS servers and apply that set to the VPC. In that case, all instances in this VPC will query all DNS requests to this new set of DNS resolvers.\nRoute 53 can route the traffic to the resources following routing policies depending on different needs:\n  Simple routing policy: when you have a single resource, such as a web server that serves a website.\n  Failover routing policy: when you want an active-passive failover.\n  Geolocation routing policy: when you want to route traffic based on the location of your users.\n  Geoproximity routing policy: when you want to route traffic based on the location of your resources.\n  Latency routing policy: when you have resources in multiple AWS Regions and you want to minimize latency.\n  Multivalue answer routing policy: when you want Route 53 to respond to DNS queries with up to eight healthy records selected at random.\n  Weighted routing policy: when you want to route traffic to multiple resources in proportions that you specify.\n  "
},
{
	"uri": "/day-3-aws-advanced-networking/vpc-peering.html",
	"title": "VPC Peering",
	"tags": [],
	"description": "",
	"content": "A company may have multiple VPCs. For example, there could be a VPC for the finance department and another VPC for the legal department. The finance department may want to access resources in the legal department, and vice versa. In that case, yu will need a VPC peering connection.\nA VPC peering connection is a networking connection between two VPCs that allows you to route traffic between them. Instances from one VPC can communicate with instances from the other VPC as if they are within the same network.\nYou can have multiple VPC peering connections for each VPC. However, you can\u0026rsquo;t establish transitive peering relationships. The following diagram illustrates it. VPC A has two peering connections with both VPC B and VPC C. VPC B and VPC C can\u0026rsquo;t have a peering relationship through VPC A. They should establish a direct VPC peering connection between them in order to do so.\n"
},
{
	"uri": "/day-3-aws-advanced-networking/lab.html",
	"title": "VPC Peering LAB",
	"tags": [],
	"description": "",
	"content": "In this lab, you will create a VPC Peering connection between 2 VPCs and allow their resources to communicate across.\nFor that, you will need to launch 2 VPCs and a VPC peering connection, and to launch EC2 instances in each VPC with private connectivity between instances.\nCreate a VPC 1:\n Login to your AWS account Go to VPC Services and on the left panel, click on Your VPCs Click on Create VPC and give it a name (i.e. VPC-1) and a /16 CIDR block (i.e. 10.100.0.0/16), then leave the rest as default and click Create VPC Go back to the Your VPCs tab and check that your VPC has been created  Create a public subnet 1:\n Go to VPC Services and on the left panel, click on Subnets Click on Create Subnet  choose your VPC from the list give it a name (PublicSub-1) choose one of the Availability Zones Use the first /24 of your VPC CIDR (i.e. 10.100.0.0/24) Click Create Subnet    Now, your subnet is setup but can only communicate within the VPC by default.\nCreate a private subnet 1:\n Go to VPC Services and on the left panel, click on Subnets Click on Create Subnet  choose your VPC from the list give it a name (PrivateSub-1) choose one of the Availability Zones Use the first /24 of your VPC CIDR (i.e. 10.100.1.0/24) Click Create Subnet    Now, your subnet is setup but can only communicate within the VPC by default.\nCreate a public route table:\n In the VPC Services tab, click on Route Tables Click on Create Route Table  choose your VPC from the list give it a name (PublicRT-1) Click Create   On the Route Tables interface, look for your route table:  select the route table on the panel at the bottom, click on Subnet Associations Edit subnet associations and select your public subnet 1 and Save    Now, you have a public route table that will be used to route all external (such as Internet) traffic to and from your public subnet. However, we still don\u0026rsquo;t know how to go to the Internet as we have no exit door yet.\nCreate an Internet Gateway:\n In the VPC Services tab, click on Internet Gateways Click on Create Internet Gateway  give it a name (IGW-1) and Create   Once it is created, you should be on its configuration page:  click Actions and select Attach to VPC select your VPC 1 and Attach    Now, your Internet Gateway belongs to your VPC environment, so we can set it up to route all Internet traffic.\n In the VPC Services tab, click on Route Tables On the Route Tables interface, look for your public route table:  select the public route table on the panel at the bottom, click on Routes then Edit routes Click Add route, set the following:  Destination: 0.0.0.0/0 (0/0 means everywhere, it is not restricted to a specific network) Target: Select Internet Gateway 1 from the drop-down   Save the changes    Create a private route table:\n In the VPC Services tab, click on Route Tables Click on Create Route Table  choose your VPC from the list give it a name (PrivateRT-1) Click Create   On the Route Tables interface, look for your route table:  select the route table on the panel at the bottom, click on Subnet Associations Edit subnet associations and select your private subnet 1 and Save    Create a private instance 1:\n Go to EC2 Services and click on Launch Instance  select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC 1 Subnet: choose your private subnet 1 Auto-assign Public IP: Select Disable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : PrivateEC2-1\u0026quot; In the security group name the sg as SG-Private-1 and for SSH rule, change the source to 10.100.0.0/24 (As we would only want to ssh to it from our public instances in our public subnet) and add a new rule for ALL ICMP IPv4 and set the source to 10.100.0.0/16. In the Review and Launch page, click Launch and select your KP that you created and stored locally during the Linux course If you deleted your key pair, just create a new one and download it.    Create a public instance 1:\n Go to EC2 Services and click on Launch Instance  select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC 1 Subnet: choose your public subnet 1 Auto-assign Public IP: Select Enable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : PublicEC2-1\u0026quot; In the security group name the sg as SG-Public-1 and for SSH rule, change the source to MyIP. In the Review and Launch page, click Launch and select the same KP as for the private instance    Now, you have to copy those steps to create the same environment in the second VPC, with the exception of the public instance because we will use the public instance in VPC-1 to login to the private instances of both VPC-1 and VPC-2, so a single public instance across 2 VPCs is enough in this context.\nCreate a second VPC:\n Login to your AWS account Go to VPC Services and on the left panel, click on Your VPCs Click on Create VPC and give it a name (i.e. VPC-\u0026ldquo;2\u0026rdquo;) and a /16 CIDR block (i.e. 10.200.0.0/16), then leave the rest as default and click Create VPC Go back to the Your VPCs tab and check that your VPC has been created  Create a private subnet:\n Go to VPC Services and on the left panel, click on Subnets Click on Create Subnet  choose your VPC from the list give it a name (PrivateSub-2) choose one of the Availability Zones Use the first /24 of your VPC CIDR (i.e. 10.200.1.0/24) Click Create Subnet    Create a private route table:\n In the VPC Services tab, click on Route Tables Click on Create Route Table  choose your VPC from the list give it a name (PrivateRT-2) Click Create   On the Route Tables interface, look for your route table:  select the route table on the panel at the bottom, click on Subnet Associations Edit subnet associations and select your private subnet 2 and Save    Create a private instance 2:\n Go to EC2 Services and click on Launch Instance  select the 1st Amazon Linux AMI from the list leave the Instance type as default and click Next Set the below:  Network: choose your VPC 2 Subnet: choose your private subnet 2 Auto-assign Public IP: Select Disable Leave the rest as default and go to the next page   Leave Storage as default and go to the next page In Tags, create a tag with Key : Name and Value : PrivateEC2-2\u0026quot; In the security group part add one port for ssh and another for ping, as below: The security group of our second VPC should allow instances in VPC-1 to ping instances in VPC-2.   Change source in the SSH rule to 10.100.0.0/16 and add another route for ALL ICMP IPv4, set the source to 10.100.0.0/16.   In the Review and Launch page, click Launch and select the same KP as for previous instances    Create a peering connection:\n In the VPC Services tab:   In the navigation pane, choose Peering Connections, Create Peering Connection. Configure the following information, and choose Create Peering Connection when you are done: Peering connection name tag: You can optionally name your VPC peering connection. VPC (Requester): Select the VPC in your account with which you want to create the VPC peering connection -\u0026gt; 10.100.0.0/16 (VPC-1) Under Select another VPC to peer with: Ensure My account is selected, and select another of your VPCs -\u0026gt; 10.200.0.0/16 (VPC-2) In the confirmation dialog box, choose OK. Select the VPC peering connection that you\u0026rsquo;ve created, and choose Actions, Accept Request. In the confirmation dialog, choose Yes, Accept. A second confirmation dialog displays; choose Modify my route tables now to go directly to the route tables page, or choose Close and go to Route Tables.  Note If you cannot see the pending VPC peering connection, check the region. An inter-region peering request must be accepted in the region of the accepter VPC. In the confirmation dialog box, choose Yes, Accept. A second confirmation dialog displays; choose Modify my route tables now to go directly to the route tables page, or choose Close and go to Route Tables.\nNow we have to update the route tables to express the peering connection.\nAdd a Route in Public subnet of VPC 1 to connect to Private subnet in the VPC 2.\n In the VPC Services tab, click on Route Tables. Select the Route Table that is associated with the public subnet of the VPC 1.   on the panel at the bottom, click on Routes then Edit routes  Click Add route, set the following:  Destination: 10.200.1.0/24 Target: pcx-xxxxxxxx (select the peering connection you have just established)   Save the changes    Add a Route in Private subnet of VPC 1 to connect to Private subnet in the VPC 2.\n In the VPC Services tab, click on Route Tables. Select the Route Table that is associated with the private subnet of the VPC 1.   on the panel at the bottom, click on Routes then Edit routes  Click Add route, set the following:  Destination: 10.200.1.0/24 Target: pcx-xxxxxxxx (select the peering connection you have just established)   Save the changes    Now you\u0026rsquo;ll have to do the same for the second VPC.\nSelect the Route Table that is associated with the private subnet of the VPC 2.\n on the panel at the bottom, click on Routes then Edit routes  Click Add route, set the following:  Destination: 10.100.0.0/16 (We are using the whole /16 because we want to include both private and public /24 subnets) Target: pcx-xxxxxxxx (select the peering connection you have just established)   Save the changes    Now the architecture is set up. You can try ssh to the instances and try to ping them.\nTest public connectivity to your public instance:\nLook for the private IP address of the private instance in VPC-1 (In EC2 Services, check the bottom panel details of your instance), and write it down somewhere. Look for the private IP address of the private instance in VPC-2 (In EC2 Services, check the bottom panel details of your instance), and write it down somewhere.\nNow, copy the public IP of your public instance, login to it with SSH and run the below connectivity tests.\nConnectivity to the local (VPC-1) private instance by replacing X.X.X.X with its IP:\nping X.X.X.X Connectivity to the VPC-2 private instance by replacing Y.Y.Y.Y with its IP:\nping Y.Y.Y.Y They should both ping! If not, it probably means that the problem is either in the SecurityGroups not allowing ICMP traffic, or that your route tables are not properly configured.\nOtherwise, well done! Good job!\nBonus Step\nYou can use the public instance to jump into both private instances of VPC-1 and VPC-2 using SSH, given we can\u0026rsquo;t access it publicly. In this case, we call this public instance a Bastion instance, it acts like a jump box.\nIf you manage to SSH to both instances, it proves your SSH communication across VPCs.\nIn order to jump into the private instances from the public instance, all the steps are detailed in this AWS page (both for MAC and Windows): https://aws.amazon.com/blogs/security/securely-connect-to-linux-instances-running-in-a-private-amazon-vpc/\n"
},
{
	"uri": "/day-2-aws-networking-basics.html",
	"title": "AWS Networking basics",
	"tags": [],
	"description": "",
	"content": "In this section, we will cover the basics of networking on the AWS Cloud by applying what we have learnt in the previous section.\nWhat we will be covering:   AWS Infrastructure\n  Virtual Private Cloud (VPC)\n  Routing/Private and Public concepts\n  Security\n  Load Balancing\n  Route53 (DNS)\n  "
},
{
	"uri": "/day-3-aws-advanced-networking/transit-gateway.html",
	"title": "Transit Gateway",
	"tags": [],
	"description": "",
	"content": "VPC peering connections can become complicated when there are too many VPCs trying to communicate, the configuration and management becomes heavy (without also forgetting the VPC peering number limits). In which case, a good practice is to use a Transit Gateway to establish connectivity between the VPCs.\nA Transit Gateway acts like a central router to centralize routing across the different networks such as VPCs and on-premise networks. This component works with VPCs, VPNs and Direct Connect connections. The routing decisions are based on route tables attached to each component at the Transit Gateway.\nThe key terms:\n Attachement Attachment route table Routes  static propagation blackhole    The Transit Gateway route tables work out the way to route traffic, however local network route tables are still required to direct the local traffic to the Transit Gateway for specific destination (like for a router to direct traffic to another router).\nHaving such routing allows customers to manage their routing centrally but also to centralize other services such as Internet (i.e. picture above), security services, etc.\nIt also becomes convenient when 2 environments living in different regions need to be able to communicate, Transit Gateways can be peered.\n"
},
{
	"uri": "/day-3-aws-advanced-networking/vpc-endpoints.html",
	"title": "VPC Endpoints",
	"tags": [],
	"description": "",
	"content": "As we previsouly mentioned in the Direct Connect section, AWS services are considered \u0026ldquo;public\u0026rdquo; services unless they\u0026rsquo;re setup in a VPC. This means that when an instance is trying to reach an AWS service (such as API Gateway, an S3 bucket, ..), the traffic is going out to the Internet because the service name resolves (DNS) to a public name/URL endpoint.\nThis situation therefore requires Internet access, therefore an Internet Gateway.\nIn some cases, you may not have any Internet access due to architecture requirements or compliance for example, in which case you cannot reach these AWS services.\nA VPC endpoint is a component that allows resources to privately access AWS services, without going through the Internet. There are two types of endpoints: Interface Endpoint and Gateway Endpoint.\n Gateway Endpoint  A Gateway endpoint can be configured for two services only: S3 and Dynamodb.\nThis type of endpoint is setup in the same way as you would setup any other route such as an Internet Gateway or a Transit Gateway. This is just an added route to the subnet route table to point any traffic destined for the service to the VPC endpoint.\nAn Interface endpoint can be configured for all services except Dynamodb.\n Interface Endpoint  The way to connect to this endpoint is not via route table addition, but via an ENI (elastic network interface). When an Interface endpoint gets created, an ENI is automatically created for this endpoint in the same VPC.\nTherefore, because we have seen that all resources within a VPC can route to each other by default, then the Interface endpoint is made available to all resources within the VPC.\n"
},
{
	"uri": "/day-3-aws-advanced-networking.html",
	"title": "AWS Advanced Networking",
	"tags": [],
	"description": "",
	"content": "In this section, we will go through some advanced networking concepts.\nWhat we will be covering:   Hybrid Infrastructure\n  VPC Peering\n  Transit Gateway\n  VPC Endpoint\n  "
},
{
	"uri": "/lab_diagram.html",
	"title": "Lab Architecture",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/further_reading.html",
	"title": "Further Reading",
	"tags": [],
	"description": "",
	"content": "Networking Fundamentals:  Networking basics  Definitions: https://commotionwireless.net/docs/cck/networking/learn-networking-basics/\nBasic concepts overview: https://www.youtube.com/watch?v=cNwEVYkx2Kk\u0026amp;ab_channel=NetworkDirection\nOSI  https://www.networkworld.com/article/3239677/the-osi-model-explained-and-how-to-easily-remember-its-7-layers.html\nhttps://medium.com/learn-with-the-lean-programmer/osi-model-layers-explained-ee1d43058c1f\nSubnetting  Tutorial: https://acloud.guru/overview/124ee946-2249-40c2-a664-aa26af523920?_ga=2.78699287.2097752874.1606729826-1802322676.1602598892\nExplanation: https://www.cbtnuggets.com/blog/technology/networking/networking-basics-what-is-ipv4-subnetting\nACG tutorial: https://acloudguru.com/course/subnetting-fundamentals\nOnline Subnetting calculator: https://www.subnet-calculator.com/\nDetailed exercices with explanations: http://www.steves-internet-guide.com/subnetting-worked-examples/\nMore exercises: https://subnetipv4.com/\nRouting ACG Tutorial: https://acloudguru.com/course/network-routing-fundamentals\nDNS / DHCP Basic explanation: https://www.youtube.com/watch?v=oTT_0t9qGDY\u0026amp;ab_channel=CloudAcademy\nComparison: https://www.cloudns.net/blog/dns-vs-dhcp/\nDNS Tutorial: https://www.youtube.com/watch?v=WDutOk8Piu8\u0026amp;ab_channel=DumbTutorials\nAWS Networking basics:  Public/Private concepts Public vs Private: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html Internet access with public subnet: https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html Internet access with private subnet: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\nACG LAB: https://acloudguru.com/hands-on-labs/creating-and-validating-connectivity-for-amazon-ec2-instances-in-a-public-and-private-subnet\nACG LAB: https://acloudguru.com/hands-on-labs/create-a-multi-subnet-vpc-with-secure-access-to-private-servers-with-outbound-internet-access\nSecurity NACL vs SecurityGroups: https://medium.com/awesome-cloud/aws-difference-between-security-groups-and-network-acls-adc632ea29ae\nACG LAB: https://acloudguru.com/hands-on-labs/aws-security-essentials-network-segmentation-lab\nElastic Load Balancing https://docs.amazonaws.cn/en_us/elasticloadbalancing/latest/userguide/what-is-load-balancing.html https://docs.amazonaws.cn/en_us/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html\nRoute53 https://www.youtube.com/watch?v=e2xLV7pCOLI\u0026feature=youtu.be\u0026ab_channel=AmazonWebServices https://www.youtube.com/watch?v=BtiS0QyiTK8\u0026ab_channel=Simplilearn AWS Advanced Networking:  Hybrid Cloud Overview: https://medium.com/@datapath_io/aws-direct-connect-vs-vpn-vs-direct-connect-gateway-97900cdf7d04 VPN: https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html DirectConnect: https://docs.aws.amazon.com/whitepapers/latest/aws-vpc-connectivity-options/aws-direct-connect.html Comparison: https://www.youtube.com/watch?v=eNxPhHTN8gY\u0026amp;ab_channel=AmazonWebServices\nVPC Peering Overview: https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\nTransit Gateway Overview: https://docs.aws.amazon.com/vpc/latest/tgw/how-transit-gateways-work.html VPC Peering vs Transit Gateway: https://medium.com/slalom-technology/next-generation-networking-with-aws-transit-gateway-and-shared-vpcs-9d971d868c65\nACG LAB: https://acloudguru.com/hands-on-labs/building-hub-and-spoke-network-topology-with-transit-gateway\nVPC Endpoints Summary: https://medium.com/awesome-cloud/aws-vpc-endpoints-overview-intro-getting-started-guide-91ca23b5af8d Overview: https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-overview.html Demo: https://www.youtube.com/watch?v=Qaccism-WRk\u0026amp;ab_channel=KnowledgeIndiaAWSAzureTutorials\nACG LAB: https://acloudguru.com/hands-on-labs/create-a-vpc-endpoint-and-s3-bucket-in-aws\n"
},
{
	"uri": "/faq.html",
	"title": "FAQs",
	"tags": [],
	"description": "",
	"content": "Subnetting Exercises Correction:\n 192.168.0.5/16  What is the binary address of 192.168.0.5? 1100 0000.1010 1000.0000 0000.0000 0101\nWhat is the subnet mask? The subnet mask is /16 which equals to this binary address: 1111 1111.1111 1111.0000 0000.0000 0000 =\u0026gt; 255.255.0.0\nWhat is the network ID? Since the subnet mask equals to /16, it means the network portion stops at the 16th bit of the IP address. Therefore the network portion is 192.168., and we complete it with zeros to get the ID =\u0026gt; 192.168.0.0.\nWhat is the gateway router IP address? The gateway is the second IP address (or first usable) =\u0026gt; 192.168.0.1.\nHow many IP addresses in this network?\nMaximum nb of bits = 32\nSubnet mask bits = 16\nNumber of IP addresses = 2^(32-16)= 2^16 = 65 536\nNumber of usable IP address = 65 536 - 2 = 65 534\n 172.31.10.10/25  What is the binary address of 172.31.10.10? 1010 1100.0001 1111.0000 1010.0000 1010\nWhat is the subnet mask? The subnet mask is /25 which equals to this binary address: 1111 1111.1111 1111.1111 1111.1000 0000 =\u0026gt; 255.255.255.128\nWhat is the network ID? Since the subnet mask equals to /25, it means the network portion stops at the 25th bit of the IP address. Therefore the network portion is 172.31.10., and we complete it with zeros to get the ID =\u0026gt; 172.131.10.0.\nWhat is the gateway router IP address? The gateway is the second IP address (or first usable) =\u0026gt; 172.31.10.1.\nHow many IP addresses in this network? Maximum nb of bits = 32 Subnet mask bits = 25\nNumber of IP addresses = 2^(32-25)= 2^7 = 128\nNumber of usable IP address = 128 - 2 = 126\n 10.20.3.2/24  What is the binary address of 10.20.3.2? 0000 1010.0001 0100.0000 0011.0000 0010\nWhat is the subnet mask? The subnet mask is /24 which equals to this binary address: 1111 1111.1111 1111.1111 1111.0000 0000 =\u0026gt; 255.255.255.0\nWhat is the network ID? Since the subnet mask equals to /24, it means the network portion stops at the 24th bit of the IP address. Therefore the network portion is 10.20.3., and we complete it with zeros to get the ID =\u0026gt; 10.20.3.0.\nWhat is the gateway router IP address? The gateway is the second IP address (or first usable) =\u0026gt; 10.20.3.1.\nHow many IP addresses in this network? Maximum nb of bits = 32 Subnet mask bits = 24\nNumber of IP addresses = 2^(32-24)= 2^24 = 256\nNumber of usable IP address = 256 - 2 = 254\nWhat does a /16 mean?\nThe /16 (or /17, 18, etc) is called a subnet mask and defines the size of a network. The number after the / represents the number of bits in the network portion of an IP address. Given 8 bits represent an octet, which represents a decimal number, a /16 would stop after the second octet of an IP address. In the same way, a /24 would stop after the third octet of an IP address given 24 bits equals to 3 times an octet (8 bits). Example:\n 10.1.1.1/16 -\u0026gt; Network portion = 10.1. (so the network ID will be 10.1.0.0) 10.1.1.1/24 -\u0026gt; Network portion = 10.1.1. (so the network ID will be 10.1.1.0) 10.1.1.1/8 -\u0026gt; Network portion = 10. (so the network ID will be 10.0.0.0)  What are the reserved IPs and what is the difference with the gateway router IP?\nThe reserved IPs in a traditional subnet (non AWS) are the following:\n first IP of the network (i.e. 10.1.1.0/24) = reserved for the network ID/Address last IP of the network (i.e. 10.1.1.255/24) = reserved for the broadcast IP  The router gateway IP address is not strictly reserved but is usually assigned to the second IP address (or first usable address) of the network (i.e. 10.1.1.1/24).\nHow can I know how many subnets in a network?\nLet\u0026rsquo;s pick an example :\n/24 = 24 bits = 1111 1111.1111 1111.1111 1111.0000 0000 =\u0026gt; In the host portion we have 8 bits of space and 8 bits = 256 /25 = 25 bits = 1111 1111.1111 1111.1111 1111.1000 0000 =\u0026gt; If we were using this /25 inside the host portion of a /24, it means we would only be using 1, and this bit is equal to 128. However, given the /24 can accept up to 256 hosts and the /25 is only using half, it then means that we actually put 2x /25 (2x 128) in this /24.\nTherefore : 1 x /24 = 2 x /25\nIn real life, that means that we could for example configure our big network (or VPC in AWS) and then create 2 small subnets of /25 inside to dedicate to 2 different departments or applications.\nThe same logic applies to all subnet maks, i.e. 1 x /16 = 2 x /17 = 4 x /18 etc\u0026hellip;.\nWhat is the difference between a switch and a router?\nA switch works at L2 of the OSI and helps devices to communicate inside a network (i.e. 10.1.1.2 to 10.1.1.3). It does not understand IP addresses and will work using MAC addresses.\nA router works at the L3 of the OSI and helps devices to communicate between different networks or to the Internet (anything that is not part of the local network).\nIn a nutshell, what is a the difference between DNS and DHCP?\nDNS can be compared to an address book and is used to map names and IP addresses together. You are using DNS every time you\u0026rsquo;re browsing a URL - your browser first asks a DNS server what is the IP address of the URL in order to redirect you to that URL.\nDHCP is used to dynamically provide IP addresses. Every time you join a new network, you automatically get an IP address - this is thanks to DHCP which has detected you and leased you an IP. In addition to this IP, DHCP also gave you all the necessary information you will probabaly need such as your IP, your network, your router gateway, and your DNS servers for whenever you want to browse the Internet for example.\nUseful tools:\nTo test connectivity between devices (i.e. your laptop and a server or even a website), you can use the PING command. Example: ping 10.1.1.1 OR ping networking.aws-cloudops.com\nTo check your network details, you can use IFCONFIG (for Linux/Mac) or IPCONFIG (for Windows) commands.\nThe above commands will give you your private IP address (from the network you are connected to). If you want to know your public IP address (the IP that the outside world sees), you can open a tab in your browser and type whatsmyip.\nTo have a look at what routes your laptop has in its route table, you can use NETSTAT -RN (for Linux/Mac) or ROUTES (for Windows).\nTo check the route taken when sending traffic from an instance to another instance, you can use TRACEROUTE (for Linux/Mac) or TRACERT (for Windows): Example: traceroute 10.1.1.1 OR tracert 10.1.1.1\nTo resolve a name to an IP, or an IP to a name (that\u0026rsquo;s when we talk about DNS), you can use the DIG (for Linux/Mac) or NSLOOKUP (for Windows) commands. Example: dig networking.aws-cloudops.com OR nslookup networking.aws-cloudops.com\nWhat makes an instance public?\nFor an instance to be public, it must have:\n a public IP address a route table with a default route to an Internet Gateway  How can a private instance use to download resources (software, patches, updates..) from the Internet?\nA private instance can use a NAT Gateway to access resources to the Internet while remaining private (not accessible from the Internet).\nCan a subnet span across 2 availability zones?\nNo, a subnet can only exist within a single availability zone.\nHow can I access AWS services if I have no Internet access?\nTo access AWS services (i.e. S3) privately, you can use a VPC endpoint in your VPC. The VPC endpoint configuration will depend on the type of endpoint : Interface or Gateway.\nWhat is Route53?\nRoute53 is the DNS service of AWS. One way to remember it is to remember that DNS runs on port 53, which is inlcuded in the name.\nWhat AWS services can I use to create a hybrid environment between my datacentre and AWS?\nYou can use AWS VPN and AWS DirectConnect to create a connection between the 2 sites, depending on your requirements.\n"
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]